import requests
import itertools
from google.transit import gtfs_realtime_pb2
from google.protobuf.json_format import MessageToJson 
import json

# # List of API keys
BUS_API = [
   "82b0450b-205f-491e-9ba1-2cdd76eef126",
    #MTA Bus Time system
]

Real_Time_Feeds = [ 
     #ACE trains
    "https://api-endpoint.mta.info/Dataservice/mtagtfsfeeds/nyct%2Fgtfs-ace ",
    #12347 trains
    "https://api-endpoint.mta.info/Dataservice/mtagtfsfeeds/nyct%2Fgtfs",
    #j and z train
    "https://api-endpoint.mta.info/Dataservice/mtagtfsfeeds/nyct%2Fgtfs-jz ",
   #b d f trains
    "https://api-endpoint.mta.info/Dataservice/mtagtfsfeeds/nyct%2Fgtfs-bdfm"  
]
    
# # Create a cycle of API keys to rotate through them
api_key_cycle = itertools.cycle(BUS_API)
api_time_cycle = itertools.cycle(Real_Time_Feeds)

def fetch_mta_data():
    for feed_url in Real_Time_Feeds:
        # Get the next API key from the cycle
        api_key = next(api_key_cycle)
        headers = {"x-api-key": api_key}

        try:
            # Make the GET request
            response = requests.get(feed_url, headers=headers)
            response.raise_for_status()  # Check for HTTP errors

            # Parse the GTFS data
            feed = gtfs_realtime_pb2.FeedMessage()
            #feed.ParseFromString(response.content)
            print(response.content[:100])  # Print the first 100 bytes


            # Process and return the parsed data
            parsed_data = []
            for entity in feed.entity:
                if entity.HasField('trip_update'):
                    parsed_data.append(entity.trip_update)

            return parsed_data  # Return all trip updates as a list

        except requests.exceptions.RequestException as e:
            print(f"Error with API key {api_key} and URL {feed_url}: {e}")
            # Try the next feed if an error occurs
            continue

  # If all keys and feeds fail
    print("All API keys or feeds failed. Please check your configuration or internet connection.")
    return None

def display_data(data):
    if data:
        print("Sample Trip Updates from MTA API:")
        for trip_update in data:
            print(trip_update)  # Print each trip update
    else:
        print("No trip updates to display.")

if __name__ == "__main__":
    print("Fetching MTA data...")
    mta_data = fetch_mta_data()
    display_data(mta_data)
